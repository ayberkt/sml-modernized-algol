structure OD = OperatorData
open Ast

infix $ \

val mkRet = fn e => OD.RET $ [([], []) \ e]

val mkBind = fn (x, exp, cmd) => OD.BND $ [([], []) \ exp, ([], [x]) \ cmd]

val mkDecl = fn (a, exp, cmd) => OD.DCL $ [([], []) \ exp, ([a], []) \ cmd]

val mkGet = fn (a : string) => (OD.GET a) $ []

val mkSet = fn (a : string, exp) => (OD.SET a) $ [([], []) \ exp]

val mkNum = fn x => (OD.NUM x) $ []

%%
%header (functor MALrValsFun (structure Token : TOKEN))

%term EOF
   | IDENT of string
   | BIND
   | CMD
   | RET
   | SCOLON
   | GETS
   | DECL
   | IN
   | LARROW
   | AT

%nonterm start of ast | exp of ast | cmd of ast

%verbose
%pos (Coord.t -> string)
%start start
%eop EOF
%noshift EOF
%name MA
%%

start : exp                                                               (exp)

exp   : IDENT                                                         (` IDENT)

cmd   : RET exp                                                     (mkRet exp)
      | BIND IDENT LARROW exp SCOLON cmd             (mkBind (IDENT, exp, cmd))
      | DECL IDENT GETS   exp IN     cmd             (mkDecl (IDENT, exp, cmd))
      | AT IDENT                                                  (mkGet IDENT)
      | IDENT GETS exp                                     (mkSet (IDENT, exp))
